import { defineComponent as T, openBlock as a, createElementBlock as f, Fragment as h, createVNode as l, unref as r, renderSlot as g, createBlock as p, mergeProps as i, withCtx as d, createElementVNode as u, normalizeClass as v, createCommentVNode as y, toDisplayString as k, createTextVNode as b, normalizeProps as V, markRaw as I, h as C } from "vue";
import { Toaster as B, toast as m } from "vue-sonner";
import { VCard as w, VCardText as A, VIcon as O, VCardActions as S, VSpacer as N, VBtn as _ } from "vuetify/components";
const D = /* @__PURE__ */ T({
  __name: "VSonner",
  props: {
    invert: { type: Boolean },
    position: { default: "bottom-center" },
    hotkey: { default: () => ["altKey", "KeyT"] },
    expand: { type: Boolean, default: !1 },
    duration: {},
    gap: {},
    visibleToasts: { default: 3 },
    toastOptions: {},
    offset: { default: 32 },
    dir: {},
    containerAriaLabel: {},
    pauseWhenPageIsHidden: { type: Boolean },
    cn: {}
  },
  setup(o) {
    return (e, n) => (a(), f(h, null, [
      l(r(B), {
        position: e.position,
        hotkey: e.hotkey,
        expand: e.expand,
        "visible-toasts": e.visibleToasts,
        duration: e.duration,
        "toast-options": e.toastOptions,
        offset: e.offset
      }, null, 8, ["position", "hotkey", "expand", "visible-toasts", "duration", "toast-options", "offset"]),
      g(e.$slots, "default")
    ], 64));
  }
}), $ = { key: 1 }, F = { class: "pb-1" }, H = ["innerHTML"], L = /* @__PURE__ */ T({
  inheritAttrs: !1,
  __name: "Toast",
  props: {
    text: {},
    description: {},
    vertical: { type: Boolean, default: !1 },
    cardProps: {},
    cardTextProps: {},
    cardActionsProps: { default: () => ({}) },
    action: {},
    prependIcon: {},
    prependIconProps: {}
  },
  emits: ["closeToast"],
  setup(o) {
    return (e, n) => (a(), p(r(w), i({ class: "card-snackbar" }, e.cardProps), {
      default: d(() => [
        u("div", {
          class: v({ "d-flex flex-no-wrap justify-space-between": !e.vertical })
        }, [
          l(r(A), i(e.cardTextProps, {
            class: { "d-flex align-center": e.prependIcon }
          }), {
            default: d(() => [
              e.prependIcon ? (a(), p(r(O), i({
                key: 0,
                class: "mr-2",
                icon: e.prependIcon
              }, e.prependIconProps), null, 16, ["icon"])) : y("", !0),
              e.description ? (a(), f("div", $, [
                u("div", F, k(e.text), 1),
                u("p", {
                  class: "font-weight-light",
                  innerHTML: e.description
                }, null, 8, H)
              ])) : (a(), f(h, { key: 2 }, [
                b(k(e.text), 1)
              ], 64))
            ]),
            _: 1
          }, 16, ["class"]),
          e.action ? (a(), p(r(S), V(i({ key: 0 }, e.cardActionsProps)), {
            default: d(() => [
              l(r(N)),
              l(r(_), i(e.action.buttonProps, {
                text: e.action.label,
                onClick: n[0] || (n[0] = () => {
                  var t, s;
                  e.$emit("closeToast"), (s = (t = e.action) == null ? void 0 : t.onClick) == null || s.call(t);
                })
              }), null, 16, ["text"])
            ]),
            _: 1
          }, 16)) : y("", !0)
        ], 2)
      ]),
      _: 1
    }, 16));
  }
}), j = (o, e) => {
  const n = o.__vccOpts || o;
  for (const [t, s] of e)
    n[t] = s;
  return n;
}, z = /* @__PURE__ */ j(L, [["__scopeId", "data-v-4a318f0f"]]);
function P(o, e) {
  const { description: n, action: t, ...s } = e || {};
  return m.custom(I(C(z, {
    ...s,
    description: n,
    action: t,
    text: o
  })), {
    ...s,
    unstyled: !0
  });
}
function c(o, e) {
  return function(n, t) {
    return P(n, {
      prependIcon: e,
      cardProps: {
        color: o,
        ...t == null ? void 0 : t.cardProps
      },
      ...t
    });
  };
}
const R = Object.assign(P, {
  success: c("success", "mdi-check-circle"),
  error: c("error", "mdi-alert-circle"),
  warning: c("warning", "mdi-alert"),
  info: c("info", "mdi-information"),
  dismiss(o) {
    return m.dismiss(o);
  },
  toastOriginal: m
});
export {
  D as VSonner,
  R as toast
};
